'''
Problem:

    Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

    For example: Given the below binary tree and sum = 22,
          5
         / \
        4   8
       /   / \
      11  13  4
     /  \    / \
    7    2  5   1
    return
    [
    [5,4,11,2],
    [5,8,4,5]
    ]
'''

class Solution(object):
    def pathSum(self, root, sum):

        def findPath(root, sum, path, result):
            if not root:
                return

            elif not root.left and not root.right:
                if sum - root.val== 0: # valid path, add to the results
                    path.append(root.val)
                    result.append(path[:])
            else:
                findPath(root.left,sum-root.val,path+[root.val],result)
                findPath(root.right,sum-root.val,path+[root.val],result)


        result = []
        findPath(root,sum,[],result)
        return result



'''
Problem:

    You are given a binary tree in which each node contains an integer value. Find the number of paths that sum to a given value.

    The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).

    The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.

    Example: root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8

          10
         /  \
        5   -3
       / \    \
      3   2   11
     / \   \
    3  -2   1

    Return 3. The paths that sum to 8 are:

    1.  5 -> 3
    2.  5 -> 2 -> 1
    3. -3 -> 11
'''
        
class Solution(object):
    def pathSum(self, root, sum):

        def traverse(root, val):
            if not root: return 0
            res = (val == root.val)
            res += traverse(root.left, val - root.val)
            res += traverse(root.right, val - root.val)
            return res
            
        if not root: return 0
        ans = traverse(root, sum)
        ans += self.pathSum(root.left, sum)
        ans += self.pathSum(root.right, sum)
        return ans
