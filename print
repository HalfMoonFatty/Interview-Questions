'''
Problem 1:

Median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle value.

Examples:
[2,3,4] , the median is 3
[2,3], the median is (2 + 3) / 2 = 2.5

Design a data structure that supports the following two operations:
void addNum(int num) - Add a integer number from the data stream to the data structure.
double findMedian() - Return the median of all elements so far.
'''

# Note: small heap is a max heap; large heap is a min heap

import heapq
class MedianFinder:
    def __init__(self):
        self.small = []
        self.large = []

    def addNum(self, num):
        if len(self.small) == len(self.large):
            heapq.heappush(self.large, -heapq.heappushpop(self.small, -num)) # note: -num
        else:
            heapq.heappush(self.small, -heapq.heappushpop(self.large, num))

    def findMedian(self):
        if len(self.small) == len(self.large):
            return float(self.large[0]-self.small[0])/2.0  # note: float
        else:
            return float(self.large[0])



'''
Problem 2:

Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. 
You can only see the k numbers in the window. Each time the sliding window moves right by one position. 
Your job is to output the median array for each window in the original array.

For example,
Given nums = [1,3,-1,-3,5,3,6,7], and k = 3.
Window position                Median
---------------               -----
[1  3  -1] -3  5  3  6  7       1
 1 [3  -1  -3] 5  3  6  7       -1
 1  3 [-1  -3  5] 3  6  7       -1
 1  3  -1 [-3  5  3] 6  7       3
 1  3  -1  -3 [5  3  6] 7       5
 1  3  -1  -3  5 [3  6  7]      6
Therefore, return the median sliding window as [1,-1,-1,3,5,6].

Note: 
You may assume k is always valid, ie: 1 ≤ k ≤ input array's size for non-empty array.
'''

'''
Solution 1:
Use hashtable to record numbers moving out of the window. The recorded numbers will only be deleted when they come to the top of the heaps.
Since both heaps will never have a size greater than n, the time complexity is O(n*log(n)) in the worst case.
Time: O(n*log(n))
Space: O(n)
'''
class Solution(object):
    def medianSlidingWindow(self, nums, k):
            
        def addNum(n):
            if len(small) > 0 and n <= -small[0]:
                heapq.heappush(small, -n)
                balance[0] += 1
            else:
                heapq.heappush(large, n)
                balance[0] -= 1
            return
                
        def removeNum(n):
            if len(small) > 0 and n <= -small[0]:
                balance[0] -= 1
                if n == -small[0]: heapq.heappop(small)
                else: invalidMap[n] += 1
            else:
                balance[0] += 1
                if n == large[0]: heapq.heappop(large)
                else: invalidMap[n] += 1
            return
                
        def rebalance():
            # rebalance first!
            if balance[0] < 0: # large has more numbers
                heapq.heappush(small, -heapq.heappop(large))
            elif balance[0] > 0: 
                heapq.heappush(large, -heapq.heappop(small))
            # remove out of date numbers
            while len(small) > 0 and invalidMap[-small[0]] > 0: 
                invalidMap[-small[0]] -= 1
                heapq.heappop(small)
            while len(large) > 0 and invalidMap[large[0]] > 0:
                invalidMap[large[0]] -= 1
                heapq.heappop(large)
            # reset balance to 0
            balance[0] = 0
            return
               
        def getMedian():
            return float(large[0]) if k % 2 else (large[0] - small[0])/2.0
        
        
        medians = []
        invalidMap = collections.defaultdict(int)
        balance = [0]
        
        # init small and large heap
        small, large = [], []    # small is Max heap; large is Min heap
        for i in range(k):
            heapq.heappush(large, nums[i])
        for _ in range(k/2):
            heapq.heappush(small, -heapq.heappop(large))
        # get first median before sliding the window
        medians.append(getMedian())
        
        for i in range(k,len(nums)):
            addNum(nums[i])
            removeNum(nums[i-k])
            rebalance()
            medians.append(getMedian())    
        return medians
        

      
'''
Solution 2: Keep the window as a sorted list
Time: O(nk)
Space: O(k)
'''
import bisect
class Solution(object):
    def medianSlidingWindow(self, nums, k):
        medians = []
        window = sorted(nums[:k])
        nums += [0]    # senitel node
        
        for i in range(k,len(nums)):
            med = float(window[k/2]) if k % 2 else (window[k/2-1] + window[k/2]) / 2.0
            medians.append(med)
            window.remove(nums[i-k])
            bisect.insort(window, nums[i])            
        return medians
