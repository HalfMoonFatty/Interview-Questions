# String

if char in string.ascii_lowercase ('abcdefghijklmnopqrstuvwxyz')
if char in string.ascii_uppercase ('ABCDEFGHIJKLMNOPQRSTUVWXYZ')
if char in string.ascii_letters ('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')
if str.isalpha():

if char in string.digits ('0123456789')
if '0' <= char <= '9':
if str.isdigit():
https://docs.python.org/2/library/stdtypes.html




# Sort (https://wiki.python.org/moin/HowTo/Sorting)

# list.sort() method is only defined for lists. In contrast, the sorted() function accepts any iterable.


# Sort using some of the object's indices as a key

>>> student_tuples = [
        ('john', 'A', 15),
        ('jane', 'B', 12),
        ('dave', 'B', 10),
]
>>> sorted(student_tuples, key=lambda student: student[2])   # sort by age
[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]


# Sort using some of the object's named attributes as a key 

>>> sorted(student_objects, key=lambda student: student.age)   # sort by age
[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]


# First sort by x[1] from large to small, then sort x from small to large
list.sort(key=lambda x: (-x[1], x))


# Sort using operator Module Functions

>>> from operator import itemgetter, attrgetter, methodcaller

>>> sorted(student_tuples, key=itemgetter(2))
[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]

>>> sorted(student_objects, key=attrgetter('age'))
[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]


# The operator module functions allow multiple levels of sorting. For example, to sort by grade then by age:

>>> sorted(student_tuples, key=itemgetter(1,2))
[('john', 'A', 15), ('dave', 'B', 10), ('jane', 'B', 12)]

>>> sorted(student_objects, key=attrgetter('grade', 'age'))
[('john', 'A', 15), ('dave', 'B', 10), ('jane', 'B', 12)]


# First sort by x[1] from large to small, then sort x from small to large
list.sort(key=lambda x: (-x[1], x))



# The Old Way Using the cmp Parameter


In Py2.x, cmp function should take two arguments to be compared and then return a negative value for less-than, return zero if they are equal, 
or return a positive value for greater-than. 

>>> def numeric_compare(x, y):
        return x - y
>>> sorted([5, 2, 4, 1, 3], cmp=numeric_compare)
[1, 2, 3, 4, 5]



# Dicts can't be sorted, but you can build a sorted list from them.

# Sort dictionary by value: 

import operator
x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = sorted(x.items(), key=operator.itemgetter(1))
or
sorted(d.items(), key=lambda x: x[1])

d = {'a': 2, 'b': 4, 'c': 3, 'd': 1, 'e': 0}
sd = sorted(d.items(), key=lambda x: x[1])
# [('e', 0), ('d', 1), ('a', 2), ('c', 3), ('b', 4)]



# Sort on keys instead of values:

import operator
x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = sorted(x.items(), key=operator.itemgetter(0))
